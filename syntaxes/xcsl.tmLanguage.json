{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "XCSL",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#misc"
		},
		{
			"include": "#constant"
		},
		{
			"include": "#functions"
		}
	],
	"repository": 
	{
		"comment":
		{
			"patterns":
			[
				{
					"name"	: "comment.block.xcsl",
					"begin"	: "\\(\\*",
					"end"		: "\\*\\)"

				},
				{
					"name"	: "comment.block.xcsl",
					"begin"	: "\\(!\\*",
					"end"		: "\\*\\)"

				},
				{
					"name"	: "comment.line.xcsl",
					"begin" : "--",
					"end"		: "\n"
				}
			]
		},
		"strings": 
		{
			"patterns": 
			[
				{
					"name": "string.quoted.double.xcsl",
					"begin": "\"",
					"end": "\"",
					"patterns": 
					[
						{
							"name": "constant.character.escape.xcsl",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.single",
					"begin": "'",
					"end"	 : "'",
					"patterns": 
					[
						{
							"name": "constant.character.escape.xcsl",
							"match": "\\\\."
						}
					]
				}
			]
		}, 
		"keywords": 
		{
			"patterns": 
			[
				{
					"name":  "keyword.control.xcsl",
					"match": "\\b(if|then|else|in|is|this|send|receive|tether|requires|sizeof|delay|let|match|with|hd|tl|len|of)\\b"
				},
				{
					"name":  "constant.other.color.xcsl",
					"match": "\\b(print|rng|regex|debug|undef|TOKEN|parser)\\b"
				},
				{
					"name": "support.type.xcsl",
					"match": "\\b(int|i8|i16|i32|i64|u8|u16|u32|u64|bool|real|float|double|char|string|list)\\b"
				}
			]
		},
		"constant":
		{
			"patterns":
			[ 
				{
					"name"  : "keyword.control.xcsl",
					"match" : "\\b(@[a-zA-Z0-9_]+)\\b"
				},
				{
					"name"	: "constant.numeric.xcsl",
					"match"	: "\\b(0[bB][0-1]+|0[oO][0-7]+|[0-9]+|0[xX][0-9a-fA-F]+)\\b"
				},
				{
					"name": "constant.language.xcsl",
					"match": "\\b(True|False)\\b"
				},
				{
					"match": "\\b(const)\\b\\s+\\b([a-z_][a-zA-Z0-9_`]*)\\b",
					"captures": 
					{
						"1": {"name": "keyword.control.xcsl"},
						"2": {"name": "constant.xcsl"}
					}
				},
				{
					"match": "\\b(const)\\b\\s+\\b([A-Z][a-zA-Z0-9_`]*)\\b\\s+\\b([a-z_][a-zA-Z0-9_`]*)\\b",
					"captures":
					{
						"1": {"name": "keyword.control.xcsl"},
						"2": {"name": "markup.bold.xcsl"},
						"3": {"name": "constant.xcsl"}
					}
				}
			]
		},
		"functions":
		{
			"patterns":
			[
				{
					"match" : "\\b(open|include|run)\\b\\s+[\\./]*\\b(.+)\\b",
					"captures": 
					{
						"1": {"name": "keyword.control.xcsl"},
						"2": {"name": "entity.name.class"}
					}
				},
				{
					"name"  : "markup.bold.xcsl",
					"match" : "\\b(_?[A-Z][a-zA-Z0-9_]*)\\b"
				},
				{
					"match" : "\\*\\->\\s*\\b(this)\\b",
					"captures": 
					{
						"1": {"name": "keyword.control.xcsl"}
					}
				},
				{
					"match" : "\\*\\->\\s*\\b(_?[a-z][a-zA-Z_0-9]*)\\b",
					"captures": 
					{
						"1": {"name": "variable.parameter.xcsl"}
					}
				},
				{
					"match": "\\b([a-z_][a-zA-Z_0-9]*)\\b\\s*[a-zA-Z0-9_, ]*\\s*:\\s*\\b([a-zA-Z_0-9 ]*)\\b",
					"captures":
					{
						"1": {"name": "entity.name.function.xcsl"},
						"2": {"name": "markup.italic.xcsl"}
					}
				},
				{
					"match": "\\b(file)\\b\\s+\\b([a-z_][a-zA-Z_0-9]*)\\b",
					"captures":
					{
						"1": {"name": "keyword.control.xcsl"},
						"2": {"name": "entity.name.function.xcsl"}
					}
				},
				{
					"match": "\\b(read|write|append)\\b\\s+\\b([a-z_][a-zA-Z_0-9]*)\\b",
					"captures":
					{
						"1": {"name": "keyword.control.xcsl"},
						"2": {"name": "entity.name.function.xcsl"}
					}
				},
				{
					"match": "\\b(tsearch)\\b\\s+\\b([\\.a-zA-Z_0-9,+ ]*)\\b",
					"captures":
					{
						"1": {"name": "keyword.control.xcsl"},
						"2": {"name": "variable.parameter.xcsl"}
					}
				},
				{
					"match": "\\b(search)\\b\\s+(\\b([a-zA-Z_0-9,+ \\.]*)\\b\\s*:\\s*)?\\b([a-zA-Z_0-9\\.]+)\\b",
					"captures":
					{
						"1": {"name": "keyword.control.xcsl"},
						"3": {"name": "variable.parameter.xcsl"},
						"4": {"name": "markup.italic.xcsl"}
					}
				},
				{
					"match": "\\b(type)\\b\\s+\\b([a-z_][a-zA-Z0-9_]*)\\b(\\s+\\b([^=]*)\\b)?\\s*=",
					"captures":
					{
						"1": {"name": "keyword.control.xcsl"},
						"2": {"name": "support.type.xcsl"},
						"3": {"name": "variable.parameter.xcsl"}
					}
				},
				{
					"match": "\\b(of)\\b\\s+\\b([a-z_][a-zA-Z0-9_]*)\\b",
					"captures": 
					{
						"1": {"name": "keyword.control.xcsl"},
						"2": {"name": "support.type"}
					}
				},
				{
					"match": "\\b(typeclass)\\b\\s+\\b([a-z_][a-zA-Z0-9_]*)\\b",
					"captures":
					{
						"1": {"name": "keyword.control.xcsl"},
						"2": {"name": "support.type.xcsl"}
					}
				},
				{
					"match": "(\\b([a-z_][a-zA-Z0-9_]*)\\b)?\\s+\\b(implements)\\b\\s+(\\b([a-z_][a-zA-Z0-9_]*)\\b)?",
					"captures": 
					{
						"2": {"name": "support.type"},
						"3": {"name": "keyword.control.xcsl"},
						"4": {"name": "support.type"}
					}
				},
				{
					"match": "\\b(offer)\\b\\s+\\b([a-z_][a-zA-Z0-9_]*)\\b\\s+(\\b(of)\\b\\s+\\b([a-z_][a-zA-Z0-9_]*)\\b\\s+)?(\\b([^=]*)\\b\\s+)?=",
					"captures":
					{
						"1": {"name": "keyword.control.xcsl"},
						"2": {"name": "entity.name.function.xcsl"},
						"4": {"name": "keyword.control.xcsl"},
						"5": {"name": "support.type.xcsl"},
						"6": {"name": "variable.parameter.xcsl"}
					}
				},
				{
					"match": "\\b(request)\\b\\s+\\b([a-z_][a-zA-Z0-9_]*)\\b\\s+(\\b([a-zA-Z0-9_ ]*)\\b)?",
					"captures":
					{
						"1": {"name": "keyword.control.xcsl"},
						"2": {"name": "entity.name.function"},
						"3": {"name": "variable.parameter"}
					}
				},
				{
					"match": "\\b(_?[a-z][a-zA-Z_0-9]*)\\b\\s*(\\b(_?[a-z][a-zA-Z_0-9 ]*)\\b\\s*)*",
					"captures": 
					{
						"1": {"name": "entity.name.function.xcsl"},
						"3": {"name": "variable.parameter.xcsl"}
					}
				}
			]
		}
	},
	"scopeName": "source.xcsl"
}
